{
  "address": "0xD4F139854d17Cd6bbC5f19db5893Bffe61BaD008",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "enum BridgeBase.Step",
          "name": "step",
          "type": "uint8"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockMtc",
      "outputs": [
        {
          "internalType": "contract IMockMtc",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "processedNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x205cc599ede871bd381f92f1e284064897d79a0692e9850fe035c4a238531e9b",
  "receipt": {
    "to": null,
    "from": "0x8995ae7935Ac2C9267D1D232B13778b94d8794F6",
    "contractAddress": "0xD4F139854d17Cd6bbC5f19db5893Bffe61BaD008",
    "transactionIndex": 1,
    "gasUsed": "986107",
    "logsBloom": "0x
    "blockHash": "0xb4ec5740746d71108b08040fb9df6b630dd7e8cb1b3f66ecc1c7c2b7ceb147b0",
    "transactionHash": "0x205cc599ede871bd381f92f1e284064897d79a0692e9850fe035c4a238531e9b",
    "logs": [],
    "blockNumber": 11699219,
    "cumulativeGasUsed": "1081605",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67aFba9383883b610a9C595761FfCD2bBec1Bc0F",
    "0x8995ae7935Ac2C9267D1D232B13778b94d8794F6"
  ],
  "solcInputHash": "d125524aaf5f0f83a30815584aed143f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"enum BridgeBase.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockMtc\",\"outputs\":[{\"internalType\":\"contract IMockMtc\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeEth.sol\":\"BridgeEth\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/BridgeBase.sol\":{\"content\":\"//This contract is shared by bridges on each chain on which MTC is deployed\\n// It will be thus inherited by both the bridge on Eth and Bsc.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMockMtc.sol\\\";\\n\\ncontract BridgeBase {\\n    //  In a typical bridge, we only call two functions from the token: burn and mint\\n    //  Neither of these functions are accessible as external functions in MTC, since supply is fixed\\n    //  To burn, we transfer to 0x000000000000000000000000000000000000dEaD\\n    //  To mint, the owner address transfers tokens\\n\\n    IMockMtc public mockMtc;\\n    address public burnAddress;\\n    address public owner;\\n    mapping(address => mapping(uint256 => bool)) public processedNonces;\\n\\n    enum Step {\\n        Burn,\\n        Mint\\n    }\\n    event Transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 date,\\n        uint256 nonce,\\n        bytes signature,\\n        Step indexed step\\n    );\\n\\n    constructor(address _token, address _owner) {\\n        mockMtc = IMockMtc(_token);\\n        burnAddress = 0x000000000000000000000000000000000000dEaD;\\n        owner = _owner;\\n    }\\n\\n\\n// to burn, the bridge contract must be given permission to move tokens from message sender\\n    function burn(\\n        address to,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) external {\\n        require(\\n            processedNonces[msg.sender][nonce] == false,\\n            \\\"transfer already processed\\\"\\n        );\\n        processedNonces[msg.sender][nonce] = true;\\n        mockMtc.transferFrom(msg.sender, burnAddress, amount);\\n        emit Transfer(\\n            msg.sender,\\n            to,\\n            amount,\\n            block.timestamp,\\n            nonce,\\n            signature,\\n            Step.Burn\\n        );\\n    }\\n\\n//subsequently, the owner must give the bridge contract permission to move tokens\\n    function mint(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) external {\\n        bytes32 message = prefixed(\\n            keccak256(abi.encodePacked(from, to, amount, nonce))\\n        );\\n        require(recoverSigner(message, signature) == from, \\\"wrong signature\\\");\\n        require(\\n            processedNonces[from][nonce] == false,\\n            \\\"transfer already processed\\\"\\n        );\\n        processedNonces[from][nonce] = true;\\n        mockMtc.transferFrom(owner, to, amount);\\n        emit Transfer(\\n            from,\\n            to,\\n            amount,\\n            block.timestamp,\\n            nonce,\\n            signature,\\n            Step.Mint\\n        );\\n    }\\n\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    function recoverSigner(bytes32 message, bytes memory sig)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        (v, r, s) = splitSignature(sig);\\n\\n        return ecrecover(message, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            uint8,\\n            bytes32,\\n            bytes32\\n        )\\n    {\\n        require(sig.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        return (v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xdd2b19e3d03a13963b98bd6bb3153bdc14cb11747bce39be04739e2e127e14df\"},\"contracts/BridgeEth.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./BridgeBase.sol\\\";\\n\\ncontract BridgeEth is BridgeBase {\\n    //to build the bridge, we define the address of the token on ETH\\n    //and the owner of that contract\\n    constructor(address token, address owner) BridgeBase(token, owner) {}\\n}\\n\",\"keccak256\":\"0x8270fafe872b18297f0b99bcced142a4b6bd99e58f153567f600fc154e50c3e6\"},\"contracts/IMockMtc.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMockMtc is IERC20{\\n}\",\"keccak256\":\"0xcda5860cbcf2124851590edffcb72cd70ff9f9f5b35e8a2a62ce8eae1f1f9c45\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011533803806200115383398181016040528101906200003791906200011e565b8181816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061dead600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620001ad565b600081519050620001188162000193565b92915050565b600080604083850312156200013257600080fd5b6000620001428582860162000107565b9250506020620001558582860162000107565b9150509250929050565b60006200016c8262000173565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200019e816200015f565b8114620001aa57600080fd5b50565b610f9680620001bd6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063525557021461006757806370d5ae05146100835780637cc70240146100a15780638a94b05f146100d15780638da5cb5b146100ed578063bd76607a1461010b575b600080fd5b610081600480360381019061007c91906108f4565b610129565b005b61008b610481565b6040516100989190610c14565b60405180910390f35b6100bb60048036038101906100b69190610986565b6104a7565b6040516100c89190610cd0565b60405180910390f35b6100eb60048036038101906100e691906109c2565b6104d6565b005b6100f5610739565b6040516101029190610c14565b60405180910390f35b61011361075f565b6040516101209190610d30565b60405180910390f35b6000610160878787876040516020016101459493929190610ba0565b60405160208183030381529060405280519060200120610783565b90508673ffffffffffffffffffffffffffffffffffffffff166101c78285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107b3565b73ffffffffffffffffffffffffffffffffffffffff161461021d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021490610d6b565b60405180910390fd5b60001515600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060009054906101000a900460ff161515146102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b890610d4b565b60405180910390fd5b6001600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688886040518463ffffffff1660e01b81526004016103a993929190610c2f565b602060405180830381600087803b1580156103c357600080fd5b505af11580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610a42565b50600180811115610435577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7fce5a9b86edd3b998c3948a7934c7ecf7dba73c4c5bcf56cf576bca4aa2beeb30888888428989896040516104709796959493929190610c66565b60405180910390a250505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60001515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615151461057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190610d4b565b60405180910390fd5b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b815260040161066293929190610c2f565b602060405180830381600087803b15801561067c57600080fd5b505af1158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190610a42565b50600060018111156106ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7fce5a9b86edd3b998c3948a7934c7ecf7dba73c4c5bcf56cf576bca4aa2beeb303387874288888860405161072a9796959493929190610c66565b60405180910390a25050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000816040516020016107969190610bee565b604051602081830303815290604052805190602001209050919050565b6000806000806107c285610828565b809350819450829550505050600186848484604051600081526020016040526040516107f19493929190610ceb565b6020604051602081039080840390855afa158015610813573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6000806000604184511461083b57600080fd5b60008060006020870151925060408701519150606087015160001a90508083839550955095505050509193909250565b60008135905061087a81610f1b565b92915050565b60008151905061088f81610f32565b92915050565b60008083601f8401126108a757600080fd5b8235905067ffffffffffffffff8111156108c057600080fd5b6020830191508360018202830111156108d857600080fd5b9250929050565b6000813590506108ee81610f49565b92915050565b60008060008060008060a0878903121561090d57600080fd5b600061091b89828a0161086b565b965050602061092c89828a0161086b565b955050604061093d89828a016108df565b945050606061094e89828a016108df565b935050608087013567ffffffffffffffff81111561096b57600080fd5b61097789828a01610895565b92509250509295509295509295565b6000806040838503121561099957600080fd5b60006109a78582860161086b565b92505060206109b8858286016108df565b9150509250929050565b6000806000806000608086880312156109da57600080fd5b60006109e88882890161086b565b95505060206109f9888289016108df565b9450506040610a0a888289016108df565b935050606086013567ffffffffffffffff811115610a2757600080fd5b610a3388828901610895565b92509250509295509295909350565b600060208284031215610a5457600080fd5b6000610a6284828501610880565b91505092915050565b610a7481610db8565b82525050565b610a8b610a8682610db8565b610e4a565b82525050565b610a9a81610dca565b82525050565b610aa981610dd6565b82525050565b610ac0610abb82610dd6565b610e5c565b82525050565b6000610ad28385610d8b565b9350610adf838584610e3b565b610ae883610e82565b840190509392505050565b610afc81610e17565b82525050565b6000610b0f601c83610dad565b9150610b1a82610ea0565b601c82019050919050565b6000610b32601a83610d9c565b9150610b3d82610ec9565b602082019050919050565b6000610b55600f83610d9c565b9150610b6082610ef2565b602082019050919050565b610b7481610e00565b82525050565b610b8b610b8682610e00565b610e78565b82525050565b610b9a81610e0a565b82525050565b6000610bac8287610a7a565b601482019150610bbc8286610a7a565b601482019150610bcc8285610b7a565b602082019150610bdc8284610b7a565b60208201915081905095945050505050565b6000610bf982610b02565b9150610c058284610aaf565b60208201915081905092915050565b6000602082019050610c296000830184610a6b565b92915050565b6000606082019050610c446000830186610a6b565b610c516020830185610a6b565b610c5e6040830184610b6b565b949350505050565b600060c082019050610c7b600083018a610a6b565b610c886020830189610a6b565b610c956040830188610b6b565b610ca26060830187610b6b565b610caf6080830186610b6b565b81810360a0830152610cc2818486610ac6565b905098975050505050505050565b6000602082019050610ce56000830184610a91565b92915050565b6000608082019050610d006000830187610aa0565b610d0d6020830186610b91565b610d1a6040830185610aa0565b610d276060830184610aa0565b95945050505050565b6000602082019050610d456000830184610af3565b92915050565b60006020820190508181036000830152610d6481610b25565b9050919050565b60006020820190508181036000830152610d8481610b48565b9050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610dc382610de0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610e2282610e29565b9050919050565b6000610e3482610de0565b9050919050565b82818337600083830152505050565b6000610e5582610e66565b9050919050565b6000819050919050565b6000610e7182610e93565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f7472616e7366657220616c72656164792070726f636573736564000000000000600082015250565b7f77726f6e67207369676e61747572650000000000000000000000000000000000600082015250565b610f2481610db8565b8114610f2f57600080fd5b50565b610f3b81610dca565b8114610f4657600080fd5b50565b610f5281610e00565b8114610f5d57600080fd5b5056fea2646970667358221220f08384792e74c269652b23959d8bf01176555fc6c4caae04948f9a0697df5ef864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063525557021461006757806370d5ae05146100835780637cc70240146100a15780638a94b05f146100d15780638da5cb5b146100ed578063bd76607a1461010b575b600080fd5b610081600480360381019061007c91906108f4565b610129565b005b61008b610481565b6040516100989190610c14565b60405180910390f35b6100bb60048036038101906100b69190610986565b6104a7565b6040516100c89190610cd0565b60405180910390f35b6100eb60048036038101906100e691906109c2565b6104d6565b005b6100f5610739565b6040516101029190610c14565b60405180910390f35b61011361075f565b6040516101209190610d30565b60405180910390f35b6000610160878787876040516020016101459493929190610ba0565b60405160208183030381529060405280519060200120610783565b90508673ffffffffffffffffffffffffffffffffffffffff166101c78285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107b3565b73ffffffffffffffffffffffffffffffffffffffff161461021d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021490610d6b565b60405180910390fd5b60001515600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060009054906101000a900460ff161515146102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b890610d4b565b60405180910390fd5b6001600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688886040518463ffffffff1660e01b81526004016103a993929190610c2f565b602060405180830381600087803b1580156103c357600080fd5b505af11580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610a42565b50600180811115610435577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7fce5a9b86edd3b998c3948a7934c7ecf7dba73c4c5bcf56cf576bca4aa2beeb30888888428989896040516104709796959493929190610c66565b60405180910390a250505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60001515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615151461057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190610d4b565b60405180910390fd5b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b815260040161066293929190610c2f565b602060405180830381600087803b15801561067c57600080fd5b505af1158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190610a42565b50600060018111156106ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7fce5a9b86edd3b998c3948a7934c7ecf7dba73c4c5bcf56cf576bca4aa2beeb303387874288888860405161072a9796959493929190610c66565b60405180910390a25050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000816040516020016107969190610bee565b604051602081830303815290604052805190602001209050919050565b6000806000806107c285610828565b809350819450829550505050600186848484604051600081526020016040526040516107f19493929190610ceb565b6020604051602081039080840390855afa158015610813573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6000806000604184511461083b57600080fd5b60008060006020870151925060408701519150606087015160001a90508083839550955095505050509193909250565b60008135905061087a81610f1b565b92915050565b60008151905061088f81610f32565b92915050565b60008083601f8401126108a757600080fd5b8235905067ffffffffffffffff8111156108c057600080fd5b6020830191508360018202830111156108d857600080fd5b9250929050565b6000813590506108ee81610f49565b92915050565b60008060008060008060a0878903121561090d57600080fd5b600061091b89828a0161086b565b965050602061092c89828a0161086b565b955050604061093d89828a016108df565b945050606061094e89828a016108df565b935050608087013567ffffffffffffffff81111561096b57600080fd5b61097789828a01610895565b92509250509295509295509295565b6000806040838503121561099957600080fd5b60006109a78582860161086b565b92505060206109b8858286016108df565b9150509250929050565b6000806000806000608086880312156109da57600080fd5b60006109e88882890161086b565b95505060206109f9888289016108df565b9450506040610a0a888289016108df565b935050606086013567ffffffffffffffff811115610a2757600080fd5b610a3388828901610895565b92509250509295509295909350565b600060208284031215610a5457600080fd5b6000610a6284828501610880565b91505092915050565b610a7481610db8565b82525050565b610a8b610a8682610db8565b610e4a565b82525050565b610a9a81610dca565b82525050565b610aa981610dd6565b82525050565b610ac0610abb82610dd6565b610e5c565b82525050565b6000610ad28385610d8b565b9350610adf838584610e3b565b610ae883610e82565b840190509392505050565b610afc81610e17565b82525050565b6000610b0f601c83610dad565b9150610b1a82610ea0565b601c82019050919050565b6000610b32601a83610d9c565b9150610b3d82610ec9565b602082019050919050565b6000610b55600f83610d9c565b9150610b6082610ef2565b602082019050919050565b610b7481610e00565b82525050565b610b8b610b8682610e00565b610e78565b82525050565b610b9a81610e0a565b82525050565b6000610bac8287610a7a565b601482019150610bbc8286610a7a565b601482019150610bcc8285610b7a565b602082019150610bdc8284610b7a565b60208201915081905095945050505050565b6000610bf982610b02565b9150610c058284610aaf565b60208201915081905092915050565b6000602082019050610c296000830184610a6b565b92915050565b6000606082019050610c446000830186610a6b565b610c516020830185610a6b565b610c5e6040830184610b6b565b949350505050565b600060c082019050610c7b600083018a610a6b565b610c886020830189610a6b565b610c956040830188610b6b565b610ca26060830187610b6b565b610caf6080830186610b6b565b81810360a0830152610cc2818486610ac6565b905098975050505050505050565b6000602082019050610ce56000830184610a91565b92915050565b6000608082019050610d006000830187610aa0565b610d0d6020830186610b91565b610d1a6040830185610aa0565b610d276060830184610aa0565b95945050505050565b6000602082019050610d456000830184610af3565b92915050565b60006020820190508181036000830152610d6481610b25565b9050919050565b60006020820190508181036000830152610d8481610b48565b9050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610dc382610de0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610e2282610e29565b9050919050565b6000610e3482610de0565b9050919050565b82818337600083830152505050565b6000610e5582610e66565b9050919050565b6000819050919050565b6000610e7182610e93565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f7472616e7366657220616c72656164792070726f636573736564000000000000600082015250565b7f77726f6e67207369676e61747572650000000000000000000000000000000000600082015250565b610f2481610db8565b8114610f2f57600080fd5b50565b610f3b81610dca565b8114610f4657600080fd5b50565b610f5281610e00565b8114610f5d57600080fd5b5056fea2646970667358221220f08384792e74c269652b23959d8bf01176555fc6c4caae04948f9a0697df5ef864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 676,
        "contract": "contracts/BridgeEth.sol:BridgeEth",
        "label": "mockMtc",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMockMtc)988"
      },
      {
        "astId": 678,
        "contract": "contracts/BridgeEth.sol:BridgeEth",
        "label": "burnAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 680,
        "contract": "contracts/BridgeEth.sol:BridgeEth",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 686,
        "contract": "contracts/BridgeEth.sol:BridgeEth",
        "label": "processedNonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMockMtc)988": {
        "encoding": "inplace",
        "label": "contract IMockMtc",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}